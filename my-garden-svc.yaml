openapi: 3.0.0
info:
  title: My Garden
  description: |
    This is a sample service  definition for the My Garden app.
  contact:
    email: jzaiss1@live.maryville.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/jzaiss/my-garden/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: plant
  description: Everything about your Plants
- name: garden
  description: The inventory of all plants in the garden
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our garden
    url: http://swagger.io
paths:
  /plant:
    put:
      tags:
      - plant
      summary: Update an existing plant
      operationId: update_plant
      requestBody:
        $ref: '#/components/requestBodies/Plant'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Plant not found
        "405":
          description: Validation exception
      security:
      - mygarden_auth:
        - write:plants
        - read:plants
      x-openapi-router-controller: swagger_server.controllers.plant_controller
    post:
      tags:
      - plant
      summary: Add a new plant to
      operationId: add_plant
      requestBody:
        $ref: '#/components/requestBodies/Plant'
      responses:
        "405":
          description: Invalid input
      security:
      - mygarden_auth:
        - write:plants
        - read:plants
      x-openapi-router-controller: swagger_server.controllers.plant_controller
  /plant/findByStatus:
    get:
      tags:
      - plant
      summary: Finds Plants by status
      description: Multiple status values can be provided with comma separated strings
      operationId: find_plants_by_status
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: growing
            enum:
            - purchased
            - planning
            - sold
            - growing
            - deceased
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
        "400":
          description: Invalid status value
      security:
      - mygarden_auth:
        - write:plants
        - read:plants
      x-openapi-router-controller: swagger_server.controllers.plant_controller
  /plant/findByTags:
    get:
      tags:
      - plant
      summary: Finds Plants by tags
      description: Muliple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing.
      operationId: find_plants_by_tags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
        "400":
          description: Invalid tag value
      deprecated: false
      security:
      - mygarden_auth:
        - write:plants
        - read:plants
      x-openapi-router-controller: swagger_server.controllers.plant_controller
  /plant/{plantId}:
    get:
      tags:
      - plant
      summary: Find a plant by ID
      description: Returns a single plant base record
      operationId: get_plant_by_id
      parameters:
      - name: plantId
        in: path
        description: ID of plant to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
            application/xml:
              schema:
                $ref: '#/components/schemas/Plant'
        "400":
          description: Invalid ID supplied
        "404":
          description: Plant not found
      security:
      - api_key: []
      x-openapi-router-controller: swagger_server.controllers.plant_controller
    delete:
      tags:
      - plant
      summary: Deletes a plant
      operationId: delete_plant
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: plantId
        in: path
        description: Plant id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Plant not found
      security:
      - mygarden_auth:
        - write:plants
        - read:plants
      x-openapi-router-controller: swagger_server.controllers.plant_controller
  /plant/{plantId}/uploadImage:
    post:
      tags:
      - plant
      summary: uploads an image
      operationId: upload_file
      parameters:
      - name: plantId
        in: path
        description: ID of plant to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - mygarden_auth:
        - write:plants
        - read:plants
      x-openapi-router-controller: swagger_server.controllers.plant_controller
  /garden/inventory:
    get:
      tags:
      - garden
      summary: Returns garden inventories by status
      description: Returns a map of status codes to quantities
      operationId: get_inventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
                x-content-type: application/json
      security:
      - api_key: []
      x-openapi-router-controller: swagger_server.controllers.garden_controller
  /garden/plan:
    post:
      tags:
      - garden
      summary: Create a plan for the garden or a section of the garden
      operationId: create_plan
      requestBody:
        description: new plan created for the garden
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
            application/xml:
              schema:
                $ref: '#/components/schemas/Plan'
        "400":
          description: Invalid Plan
      x-openapi-router-controller: swagger_server.controllers.garden_controller
  /garden/plan/{planId}:
    get:
      tags:
      - garden
      summary: Find garden plan by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions
      operationId: get_plan_by_id
      parameters:
      - name: planId
        in: path
        description: ID of plan for the garden
        required: true
        style: simple
        explode: false
        schema:
          maximum: 10
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
            application/xml:
              schema:
                $ref: '#/components/schemas/Plan'
        "400":
          description: Invalid ID supplied
        "404":
          description: Plan not found
      x-openapi-router-controller: swagger_server.controllers.garden_controller
    delete:
      tags:
      - garden
      summary: Delete plan order by ID
      description: For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors
      operationId: delete_plan
      parameters:
      - name: planId
        in: path
        description: ID of the plan that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Plan not found
      x-openapi-router-controller: swagger_server.controllers.garden_controller
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: create_user
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: create_users_with_array_input
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: create_users_with_list_input
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: login_user
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logout_user
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: get_user_by_name
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-openapi-router-controller: swagger_server.controllers.user_controller
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: update_user
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      x-openapi-router-controller: swagger_server.controllers.user_controller
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: delete_user
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-openapi-router-controller: swagger_server.controllers.user_controller
components:
  schemas:
    Plan:
      type: object
      properties:
        id:
          type: integer
          format: int64
        plantId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      example:
        quantity: 1
        plantId: 6
        id: 0
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: false
        status: placed
      xml:
        name: Plan
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      example:
        name: name
        id: 6
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      example:
        name: name
        id: 1
      xml:
        name: Tag
    Plant:
      required:
      - name
      - photoUrls
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: sunflower
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: plant status in the garden
          enum:
          - available
          - pending
        watering:
          type: string
          example: Frequently
        hardiness:
          type: string
          example: hardiness description
        fertilizaton:
          type: string
          example: how to fertilize
        size:
          type: string
          example: how tall and wide
        spacing:
          type: string
          example: how far apart
        details:
          type: string
          example: open text field
      example:
        hardiness: hardiness description
        fertilizaton: how to fertilize
        photoUrls:
        - photoUrls
        - photoUrls
        spacing: how far apart
        watering: Frequently
        size: how tall and wide
        name: sunflower
        details: open text field
        id: 0
        category:
          name: name
          id: 6
        tags:
        - name: name
          id: 1
        - name: name
          id: 1
        status: available
      xml:
        name: Plant
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      example:
        code: 0
        type: type
        message: message
  requestBodies:
    Plant:
      description: Plant object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Plant'
        application/xml:
          schema:
            $ref: '#/components/schemas/Plant'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    mygarden_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://mygarden.io/oauth/dialog
          scopes:
            write:plants: modify plants in your account
            read:plants: read your plants
      x-tokenInfoFunc: swagger_server.controllers.authorization_controller.check_mygarden_auth
      x-scopeValidateFunc: swagger_server.controllers.authorization_controller.validate_scope_mygarden_auth
    api_key:
      type: apiKey
      name: api_key
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_api_key

